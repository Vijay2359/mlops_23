#!/usr/bin/env python

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback

import pandas as pd
from sklearn import tree

prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

channel_name = 'training'
training_path = os.path.join(input_path, channel_name)

def train():
    print('Starting the training.')
    try:
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        input_files = [os.path.join(training_path, file) for file in os.listdir(training_path)]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [pd.read_csv(file, header=None) for file in input_files]
        train_data = pd.concat(raw_data)

        # ✅ Fixed here: replace deprecated ix with iloc
        train_y = train_data.iloc[:, 0]
        train_X = train_data.iloc[:, 1:]

        max_leaf_nodes = trainingParams.get('max_leaf_nodes', 4)
        if max_leaf_nodes is not None:
            max_leaf_nodes = int(max_leaf_nodes)

        clf = tree.DecisionTreeClassifier(max_leaf_nodes=max_leaf_nodes)
        clf = clf.fit(train_X, train_y)

        # ✅ Fixed here: open file in binary mode ('wb')
        with open(os.path.join(model_path, 'decision-tree-model.pkl'), 'wb') as out:
            pickle.dump(clf, out)
        print('Training complete.')
    except Exception as e:
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        sys.exit(255)

if __name__ == '__main__':
    train()
    sys.exit(0)
